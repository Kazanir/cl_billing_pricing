<?php

/**
 * @file Module for providing per-license and per-user pricing logic to
 * Commerce License Billing.
 */

/********** Field Type API Hooks **********/

/**
 * Implements hook_field_info().
 *
 * This field type provides a multi-faceted way of interacting with the pricing
 * logic of recurring license line items generated by Commerce License Billing.
 *
 * As with Commerce License Billing, we abbreviate to cl_ to save space on our
 * machine names.
 */
function commerce_license_billing_pricing_field_info() {
  $items = array();

  $items['cl_billing_pricing'] = array(
    'label' => t('Recurring license pricing options'),
    'description' => t('This field stores a variety of options used to price recurring license line items.'),
    'settings' => array(),
    // @todo: If on a user, this field needs to select the license types for which its makes its options available
    // @todo: Also let the user input the name of a price component which is used to discount line items using the
    // Adjust and Modify actions. By default we use "base_price" for this.
    'instance_settings' => array(),
    'default_widget' => 'cl_billing_pricing_select',
    'default_formatter' => 'hidden',
  );

  return $items;
}

/**
 * Implements hook_field_widget_info().
 */
function commerce_license_billing_pricing_field_widget_info() {
  $items = array();

  $items['cl_billing_pricing_select'] = array(
    'label' => t('Recurring license pricing options'),
    'description' => t('Provides the state-driven multi-select widget for the CLB pricing field type.'),
    'field types' => array('cl_billing_pricing'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default values' => FIELD_BEHAVIOR_NONE,
    ),
    'weight' => -20,
  );

  return $items;
}

/**
 * Implements hook_field_widget_form().
 *
 * @todo: This.
 */
function commerce_license_billing_pricing_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($field['type'] != 'cl_billing_pricing') {
    // This shouldn't ever happen!
    return;
  }

  // @todo: Gather available types for this field and instance.
  // This is primarily based on the licenses, or the enabled licenses if this
  // field is on a user entity.
  $available_types = array(
    "product:1" => t('Particular Product'),
    "usage:group" => t('Particular Usage Group'),
    "plan" => t('Plan Line Item'),
  );

  $item_form = $element;
  $item_form += array(
    '#type' => 'container',
  );

  // The "type" is a key which is used to determine whether this pricing action
  // applies to a given line item. Anticipated values are e.g. product:%id,
  // usage:%groupname, plan, etc. @todo: Finalize this.
  $item_form['type'] = array(
    '#type' => 'select',
    '#options' => $available_types,
    '#title' => t('Apply To'),
  );

  $item_form['action'] = array(
    '#type' => 'select',
    '#options' => commerce_license_billing_pricing_action_options(), // @todo: This function
    '#title' => t('Action'),
  );

  $item_form['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value'),
  );

  return $item_form;
}

/**
 * Get a list of valid actions for the pricing options field.
 */
function commerce_license_billing_pricing_action_options() {
  $options = array(
    'currency' => t('Set Currency'),
    'base_price' => t('Set Base Price'),
    'price_add' => t('Adjust Price (Flat)'),
    'price_multiply' => t('Modify Price (Multiply)'),
  );

  drupal_alter('commerce_license_billing_pricing_action_options', $options);

  return $options;
}


/********** Line item pricing logic **********/

/**
 * Main pricing callback for line items
 *
 * @todo: This.
 */
function commerce_license_billing_pricing_process_line_item($line_item) {
  // @todo: Figure out what kind of line item this is (usage or plan).


  // @todo: Figure out if the license or owner of this license *have* any cl_billing_pricing-type fields on themselves.


  // @todo: Dig out the pricing modifications desired for this line item type.


  // @todo: Do this based on both the license and the license owner's user.


  // @todo: Apply the desired modifications.
}


